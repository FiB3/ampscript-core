// Copyright (c) 2022, salesforce.com, inc.
// All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/Apache-2.0

using System.Reflection;
using System.Runtime.Loader;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Emit;
using Sage.Engine.Runtime;

namespace Sage.Engine.Compiler
{
    /// <summary>
    /// Represents the results of compiling AMPscript, including all of the internal details of the compilation process
    /// </summary>
    /// <param name="ContentSourceFile">The source AMPscript code</param>
    /// <param name="GeneratedMethodName">The name of the C# method that is generated by the transpiler</param>
    /// <param name="CompilationUnit">The C# compilation unit produced by the transpiler</param>
    /// <param name="Compilation">The C# code compilation, produced by the C# compiler</param>
    /// <param name="EmitResult">The result of running the C# compiler and getting PDBs and assemblies</param>
    /// <param name="Assembly">The assembly generated by the C# compilation process</param>
    /// <param name="AssemblyContext">The assembly context from the generation.  This can be later be unloaded to allow recompilation.</param>
    /// <param name="TranspiledSource">The transpiled C# source code representation</param>
    internal record CompileResult(
        string ContentSourceFile,
        string GeneratedMethodName,
        CompilationUnitSyntax CompilationUnit,
        CSharpCompilation Compilation,
        EmitResult EmitResult,
        Assembly? Assembly,
        AssemblyLoadContext? AssemblyContext,
        string TranspiledSource)
    {
        public void Execute(RuntimeContext context)
        {
            if (!EmitResult.Success)
            {
                throw new CompileCodeException(this);
            }

            object[] arguments = { context };
            Assembly
                ?.GetType("Sage.Engine.Runtime.AmpProgram")
                ?.GetMethod(GeneratedMethodName)
                ?.Invoke(null, arguments);
        }
    }
}
